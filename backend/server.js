const express = require('express');
const cors = require('cors');
const dotenv = require('dotenv');
const bodyParser = require('body-parser');
const OpenAI = require('openai');
const nodemailer = require('nodemailer');

dotenv.config();

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(bodyParser.json({ limit: '10mb' }));
app.use(bodyParser.urlencoded({ extended: true, limit: '10mb' }));

// Check if we should use real Groq API or mock
const USE_MOCK_AI = !process.env.GROQ_API_KEY || process.env.GROQ_API_KEY === 'test';
console.log('GROQ_API_KEY loaded:', process.env.GROQ_API_KEY ? 'Yes' : 'No');
console.log('Using Mock AI:', USE_MOCK_AI);

// Email transporter setup
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS
  }
});

// Routes

// Health check endpoint
app.get('/api/health', (req, res) => {
  res.json({ message: 'Server is running!' });
});

// Generate summary endpoint
app.post('/api/generate-summary', async (req, res) => {
  try {
    const { transcript, customPrompt } = req.body;

    if (!transcript) {
      return res.status(400).json({ error: 'Transcript is required' });
    }

    // Create the prompt for AI
    const prompt = customPrompt 
      ? `${customPrompt}\n\nTranscript to summarize:\n${transcript}`
      : `Please summarize the following meeting transcript in a clear, structured format with key points, decisions made, and action items:\n\n${transcript}`;

    let summary;
    
    if (USE_MOCK_AI) {
      // Mock AI for testing (no API key needed)
      summary = `## Meeting Summary (Generated by Mock AI)

**Key Points:**
• Meeting focused on ${transcript.split(' ').slice(0, 5).join(' ')}...
• Several important decisions were made
• Action items assigned to team members

**Action Items:**
• Follow up on discussed topics
• Review progress in next meeting
• Implement proposed changes

**Decisions Made:**
• Approved project timeline
• Allocated resources for next phase

*Note: This is a demo summary. Set up a real AI API key for actual summarization.*

${customPrompt ? `\n**Custom Instructions Applied:** ${customPrompt}` : ''}`;
    } else {
      // Use real Groq API
      const groq = new OpenAI({
        apiKey: process.env.GROQ_API_KEY,
        baseURL: 'https://api.groq.com/openai/v1'
      });
      
      const completion = await groq.chat.completions.create({
        model: "llama-3.1-8b-instant",
        messages: [
          {
            role: "system",
            content: "You are a helpful assistant that creates clear, well-structured meeting summaries."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        max_tokens: 1000,
        temperature: 0.7
      });

      summary = completion.choices[0].message.content;
    }

    res.json({ summary });
  } catch (error) {
    console.error('Error generating summary:', error);
    res.status(500).json({ error: 'Failed to generate summary' });
  }
});

// Send email endpoint
app.post('/api/send-email', async (req, res) => {
  try {
    const { recipients, subject, summary } = req.body;

    if (!recipients || !summary) {
      return res.status(400).json({ error: 'Recipients and summary are required' });
    }

    const emailSubject = subject || 'Meeting Summary';
    const emailBody = `
      <h2>${emailSubject}</h2>
      <div style="white-space: pre-wrap; font-family: Arial, sans-serif;">${summary}</div>
      <br>
      <p style="color: #666; font-size: 14px;">This summary was generated by AI Meeting Summarizer</p>
    `;

    // Send email to each recipient
    const emailPromises = recipients.map(recipient => {
      return transporter.sendMail({
        from: process.env.EMAIL_USER,
        to: recipient,
        subject: emailSubject,
        html: emailBody
      });
    });

    await Promise.all(emailPromises);

    res.json({ message: 'Emails sent successfully' });
  } catch (error) {
    console.error('Error sending email:', error);
    res.status(500).json({ error: 'Failed to send emails' });
  }
});

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
